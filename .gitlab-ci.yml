stages:
  - build
  - test
  - deploy
  - dast

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  DOCKER_IMAGE: $CONTAINER_TEST_IMAGE
  DAST_WEBSITE: http://demoApp:8080/
  DAST_FULL_SCAN_ENABLED: "true"

include:
  - template: Jobs/SAST.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/SAST-IaC.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST-IaC.gitlab-ci.yml
  - template: Security/DAST.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/API-Security.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml 

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/

build: 
  stage: build
  image: composer:latest
  script:
    - composer install --prefer-dist --no-interaction
  artifacts:
    paths:
      - vendor/

build_image:
  services:
  - name: docker:dind
    alias: dind
  image: docker:20.10.16
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --tag $CONTAINER_TEST_IMAGE --tag $CI_REGISTRY_IMAGE:latest ./Docker
    - docker push $CONTAINER_TEST_IMAGE
    - docker push $CI_REGISTRY_IMAGE:latest
  needs: [build]

cs:
  stage: test
  image: php:8.2
  script:
    - ./vendor/bin/php-cs-fixer fix src --dry-run --stop-on-violation # https://github.com/PHP-CS-Fixer/PHP-CS-Fixer

phpunit:
  stage: test
  image: php:8.2
  variables:
    APP_ENV: test
  script:
    - ./vendor/bin/phpunit # https://github.com/sebastianbergmann/phpunit

composer:
  stage: test
  image: composer:latest
  script:
    - composer normalize --diff --dry-run # https://github.com/ergebnis/composer-normalize
    - composer validate # https://getcomposer.org/doc/03-cli.md#validate
    - vendor/bin/composer-require-checker check --config-file=composer-require-checker.json # https://github.com/maglnet/ComposerRequireChecker
    - php8.2 vendor/bin/composer-unused # https://github.com/composer-unused/composer-unused
    - composer audit # https://getcomposer.org/doc/03-cli.md#audit

di: # чтобы проверить, что контейнер компилируется корректно в прод режиме
  stage: test
  image: php:8.2
  script:
    - bin/console cache:clear --env=prod
    - bin/console lint:container --env=prod

schema-validate: # проверить корректность маппингов доктрины, без соединения с бд
  stage: test
  image: php:8.2
  script:
    - bin/console doctrine:schema:validate --skip-sync

rector:
  stage: test
  image: php:8.2
  script:
    - vendor/rector/rector/bin/rector --dry-run

deptrac: # валидация архитектурных правил
  stage: test
  image: php:8.2
  script:
    - vendor/bin/deptrac --config-file=deptrac.modules.yaml --cache-file=var/.deptrac.modules.cache
    - vendor/bin/deptrac --config-file=deptrac.directories.yaml --cache-file=var/.deptrac.directories.cache

psalm: # проверка типов (и не только)
   stage: test
   image: php:8.2
   script:
     - vendor/bin/psalm

deploy: # автоматическая доставка изменений на сервер (dev/stage/prod - для каждой будет своя джоба)
  stage: deploy
  when: manual
  only:
    - master   # или main/develop/release.x.x.x
  script:
    - echo "Deploying the application..."
#    здесь будет кастомная логика. в самом простом виде
#     - ssh $HOST:$USER \
#     && cd $PATH_TO_PROJECT \
#     && git clone $LINK \
#     && bin/console bin/console clear:cache \
#     && bin/console doctrine:migration:migrate
#  в более продвинутом варианте собираем docker image с кодом, vendor'ом, пушим в registry, и подменяем контейнер на сервере
    - echo "Application successfully deployed."

container_scanning:
  variables:
    CS_IMAGE: $CONTAINER_TEST_IMAGE

secret_detection:
  variables:
    SECRET_DETECTION_HISTORIC_SCAN: "true"

kics-iac-sast:
  allow_failure: false

dast:
  services: # use services to link your app container to the dast job
    - name: $CONTAINER_TEST_IMAGE
      alias: demoApp

